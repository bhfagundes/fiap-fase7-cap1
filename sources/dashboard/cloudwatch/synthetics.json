{
  "Canaries": [
    {
      "Name": "farmtech-dashboard-availability",
      "Description": "Teste de disponibilidade do dashboard",
      "ArtifactS3Location": "s3://farmtech-synthetics/dashboard-availability/",
      "ExecutionRoleArn": "arn:aws:iam::123456789012:role/farmtech-synthetics-role",
      "Schedule": {
        "Expression": "rate(5 minutes)"
      },
      "RunConfig": {
        "TimeoutInSeconds": 60,
        "MemoryInMB": 1024,
        "ActiveTracing": true
      },
      "SuccessRetentionPeriod": 30,
      "FailureRetentionPeriod": 30,
      "Code": {
        "Handler": "index.handler",
        "Script": "const synthetics = require('Synthetics');\nconst log = require('SyntheticsLogger');\n\nconst pageLoadBlueprint = async function () {\n  const url = 'https://dashboard.farmtech.com';\n  const page = await synthetics.getPage();\n  const response = await page.goto(url, {waitUntil: 'networkidle0'});\n  await page.waitForSelector('.dashboard-container');\n  const title = await page.title();\n  log.info('Page title: ' + title);\n  if (response.status() !== 200) {\n    throw 'Failed to load dashboard';\n  }\n};\n\nexports.handler = async () => {\n  return await pageLoadBlueprint();\n};"
      }
    },
    {
      "Name": "farmtech-api-health",
      "Description": "Teste de saúde da API",
      "ArtifactS3Location": "s3://farmtech-synthetics/api-health/",
      "ExecutionRoleArn": "arn:aws:iam::123456789012:role/farmtech-synthetics-role",
      "Schedule": {
        "Expression": "rate(1 minute)"
      },
      "RunConfig": {
        "TimeoutInSeconds": 30,
        "MemoryInMB": 1024,
        "ActiveTracing": true
      },
      "SuccessRetentionPeriod": 30,
      "FailureRetentionPeriod": 30,
      "Code": {
        "Handler": "index.handler",
        "Script": "const synthetics = require('Synthetics');\nconst log = require('SyntheticsLogger');\n\nconst apiTestBlueprint = async function () {\n  const url = 'https://api.farmtech.com/health';\n  const response = await synthetics.executeHttpStep('Health Check', url, {\n    method: 'GET',\n    headers: {},\n    body: ''\n  });\n  if (response.statusCode !== 200) {\n    throw 'API health check failed';\n  }\n  const body = JSON.parse(response.body);\n  if (!body.status === 'healthy') {\n    throw 'API reported unhealthy status';\n  }\n};\n\nexports.handler = async () => {\n  return await apiTestBlueprint();\n};"
      }
    },
    {
      "Name": "farmtech-iot-connection",
      "Description": "Teste de conexão IoT",
      "ArtifactS3Location": "s3://farmtech-synthetics/iot-connection/",
      "ExecutionRoleArn": "arn:aws:iam::123456789012:role/farmtech-synthetics-role",
      "Schedule": {
        "Expression": "rate(1 minute)"
      },
      "RunConfig": {
        "TimeoutInSeconds": 30,
        "MemoryInMB": 1024,
        "ActiveTracing": true
      },
      "SuccessRetentionPeriod": 30,
      "FailureRetentionPeriod": 30,
      "Code": {
        "Handler": "index.handler",
        "Script": "const synthetics = require('Synthetics');\nconst log = require('SyntheticsLogger');\nconst AWS = require('aws-sdk');\n\nconst iotTestBlueprint = async function () {\n  const iot = new AWS.Iot();\n  const response = await iot.describeEndpoint({});\n  const endpoint = response.endpointAddress;\n  const client = new AWS.IotData({endpoint: endpoint});\n  const message = {\n    test: 'connection',\n    timestamp: new Date().toISOString()\n  };\n  await client.publish({\n    topic: 'farmtech/test',\n    payload: JSON.stringify(message),\n    qos: 0\n  }).promise();\n};\n\nexports.handler = async () => {\n  return await iotTestBlueprint();\n};"
      }
    },
    {
      "Name": "farmtech-database-connection",
      "Description": "Teste de conexão com o banco de dados",
      "ArtifactS3Location": "s3://farmtech-synthetics/database-connection/",
      "ExecutionRoleArn": "arn:aws:iam::123456789012:role/farmtech-synthetics-role",
      "Schedule": {
        "Expression": "rate(5 minutes)"
      },
      "RunConfig": {
        "TimeoutInSeconds": 30,
        "MemoryInMB": 1024,
        "ActiveTracing": true
      },
      "SuccessRetentionPeriod": 30,
      "FailureRetentionPeriod": 30,
      "Code": {
        "Handler": "index.handler",
        "Script": "const synthetics = require('Synthetics');\nconst log = require('SyntheticsLogger');\nconst { Pool } = require('pg');\n\nconst dbTestBlueprint = async function () {\n  const pool = new Pool({\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    database: process.env.DB_NAME,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD\n  });\n  const client = await pool.connect();\n  try {\n    const result = await client.query('SELECT 1');\n    if (result.rows[0].?column? !== 1) {\n      throw 'Database query failed';\n    }\n  } finally {\n    client.release();\n    await pool.end();\n  }\n};\n\nexports.handler = async () => {\n  return await dbTestBlueprint();\n};"
      }
    },
    {
      "Name": "farmtech-ml-model",
      "Description": "Teste do modelo de ML",
      "ArtifactS3Location": "s3://farmtech-synthetics/ml-model/",
      "ExecutionRoleArn": "arn:aws:iam::123456789012:role/farmtech-synthetics-role",
      "Schedule": {
        "Expression": "rate(15 minutes)"
      },
      "RunConfig": {
        "TimeoutInSeconds": 60,
        "MemoryInMB": 1024,
        "ActiveTracing": true
      },
      "SuccessRetentionPeriod": 30,
      "FailureRetentionPeriod": 30,
      "Code": {
        "Handler": "index.handler",
        "Script": "const synthetics = require('Synthetics');\nconst log = require('SyntheticsLogger');\nconst AWS = require('aws-sdk');\n\nconst mlTestBlueprint = async function () {\n  const sagemaker = new AWS.SageMakerRuntime();\n  const payload = {\n    features: [1, 2, 3, 4, 5]\n  };\n  const response = await sagemaker.invokeEndpoint({\n    EndpointName: 'farmtech-model',\n    ContentType: 'application/json',\n    Body: JSON.stringify(payload)\n  }).promise();\n  const result = JSON.parse(response.Body.toString());\n  if (!result.prediction) {\n    throw 'ML model prediction failed';\n  }\n};\n\nexports.handler = async () => {\n  return await mlTestBlueprint();\n};"
      }
    }
  ],
  "Groups": [
    {
      "Name": "farmtech-dashboard-group",
      "Description": "Grupo de testes do dashboard",
      "Canaries": [
        "farmtech-dashboard-availability",
        "farmtech-api-health"
      ]
    },
    {
      "Name": "farmtech-backend-group",
      "Description": "Grupo de testes do backend",
      "Canaries": [
        "farmtech-iot-connection",
        "farmtech-database-connection",
        "farmtech-ml-model"
      ]
    }
  ]
} 