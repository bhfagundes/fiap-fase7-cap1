import streamlit as st
import sys
import os
from pathlib import Path
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import requests
import json
from datetime import datetime, timedelta
import cv2
import numpy as np
from PIL import Image
import io

# Adiciona os diret√≥rios dos m√≥dulos ao path
sys.path.append(str(Path(__file__).parent.parent))

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="FarmTech - Dashboard Integrado",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√µes auxiliares
def load_data():
    """Carrega dados de exemplo para demonstra√ß√£o"""
    dates = pd.date_range(start='2024-01-01', end='2024-01-31', freq='D')
    data = {
        'data': dates,
        'temperatura': np.random.normal(25, 5, len(dates)),
        'umidade': np.random.normal(65, 10, len(dates)),
        'precipitacao': np.random.exponential(5, len(dates))
    }
    return pd.DataFrame(data)

def create_metric_card(title, value, delta=None, delta_color="normal"):
    """Cria um card de m√©trica estilizado"""
    st.metric(
        label=title,
        value=value,
        delta=delta,
        delta_color=delta_color
    )

def plot_temperature(df):
    """Plota gr√°fico de temperatura"""
    fig = px.line(df, x='data', y='temperatura',
                  title='Temperatura ao Longo do Tempo',
                  labels={'data': 'Data', 'temperatura': 'Temperatura (¬∞C)'})
    fig.update_layout(height=400)
    return fig

def plot_humidity(df):
    """Plota gr√°fico de umidade"""
    fig = px.line(df, x='data', y='umidade',
                  title='Umidade ao Longo do Tempo',
                  labels={'data': 'Data', 'umidade': 'Umidade (%)'})
    fig.update_layout(height=400)
    return fig

def plot_precipitation(df):
    """Plota gr√°fico de precipita√ß√£o"""
    fig = px.bar(df, x='data', y='precipitacao',
                 title='Precipita√ß√£o ao Longo do Tempo',
                 labels={'data': 'Data', 'precipitacao': 'Precipita√ß√£o (mm)'})
    fig.update_layout(height=400)
    return fig

# T√≠tulo principal
st.title("üåæ FarmTech - Sistema Integrado de Gest√£o para Agroneg√≥cio")

# Sidebar com navega√ß√£o
st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio(
    "Selecione o m√≥dulo:",
    ["Vis√£o Geral", "Dados Meteorol√≥gicos", "IoT e Automa√ß√£o", 
     "An√°lise de Dados", "Vis√£o Computacional", "Configura√ß√µes"]
)

# Carrega dados de exemplo
df = load_data()

# Conte√∫do principal baseado na sele√ß√£o
if page == "Vis√£o Geral":
    st.header("Vis√£o Geral do Sistema")
    st.write("""
    Bem-vindo ao sistema integrado FarmTech. Este dashboard combina todas as funcionalidades
    desenvolvidas nas fases anteriores em uma interface unificada.
    """)
    
    # Cards com m√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        create_metric_card("Temperatura Atual", "25¬∞C", "2¬∞C", "normal")
    with col2:
        create_metric_card("Umidade do Solo", "65%", "-5%", "inverse")
    with col3:
        create_metric_card("Status da Irriga√ß√£o", "Ativo", "", "normal")
    with col4:
        create_metric_card("Previs√£o de Rendimento", "+15%", "15%", "normal")
    
    # Gr√°ficos principais
    st.subheader("Tend√™ncias Recentes")
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(plot_temperature(df), use_container_width=True)
    with col2:
        st.plotly_chart(plot_humidity(df), use_container_width=True)
    
    # Alertas e Notifica√ß√µes
    st.subheader("Alertas e Notifica√ß√µes")
    alerts = [
        {"tipo": "‚ö†Ô∏è Alerta", "mensagem": "Umidade do solo abaixo do ideal", "tempo": "5 min atr√°s"},
        {"tipo": "‚ÑπÔ∏è Info", "mensagem": "Sistema de irriga√ß√£o ativado", "tempo": "15 min atr√°s"},
        {"tipo": "‚úÖ Sucesso", "mensagem": "Backup conclu√≠do com sucesso", "tempo": "1 hora atr√°s"}
    ]
    
    for alert in alerts:
        st.info(f"{alert['tipo']} - {alert['mensagem']} ({alert['tempo']})")

elif page == "Dados Meteorol√≥gicos":
    st.header("Dados Meteorol√≥gicos")
    
    # Filtros
    col1, col2 = st.columns(2)
    with col1:
        data_inicio = st.date_input("Data Inicial", datetime.now() - timedelta(days=30))
    with col2:
        data_fim = st.date_input("Data Final", datetime.now())
    
    # Gr√°ficos
    st.plotly_chart(plot_temperature(df), use_container_width=True)
    st.plotly_chart(plot_humidity(df), use_container_width=True)
    st.plotly_chart(plot_precipitation(df), use_container_width=True)
    
    # Tabela de dados
    st.subheader("Dados Detalhados")
    st.dataframe(df)

elif page == "IoT e Automa√ß√£o":
    st.header("IoT e Automa√ß√£o")
    
    # Status dos sensores
    st.subheader("Status dos Sensores")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Sensor de Temperatura", "Online", "Ativo")
    with col2:
        st.metric("Sensor de Umidade", "Online", "Ativo")
    with col3:
        st.metric("Sensor de pH", "Online", "Ativo")
    
    # Controle de irriga√ß√£o
    st.subheader("Controle de Irriga√ß√£o")
    if st.button("Ativar Irriga√ß√£o"):
        st.success("Sistema de irriga√ß√£o ativado!")
    if st.button("Desativar Irriga√ß√£o"):
        st.warning("Sistema de irriga√ß√£o desativado!")
    
    # Configura√ß√µes
    st.subheader("Configura√ß√µes")
    umidade_min = st.slider("Umidade M√≠nima (%)", 0, 100, 30)
    umidade_max = st.slider("Umidade M√°xima (%)", 0, 100, 70)
    intervalo = st.slider("Intervalo de Verifica√ß√£o (min)", 1, 60, 15)

elif page == "An√°lise de Dados":
    st.header("An√°lise de Dados")
    
    # Previs√£o de rendimento
    st.subheader("Previs√£o de Rendimento")
    col1, col2 = st.columns(2)
    with col1:
        cultura = st.selectbox("Cultura", ["Arroz", "Dendezeiro"])
        area = st.number_input("√Årea (hectares)", 1, 1000, 100)
    with col2:
        temperatura = st.number_input("Temperatura M√©dia (¬∞C)", 0, 50, 25)
        umidade = st.number_input("Umidade M√©dia (%)", 0, 100, 65)
    
    if st.button("Calcular Previs√£o"):
        st.success(f"Previs√£o de rendimento: {np.random.normal(100, 10):.1f} toneladas")

elif page == "Vis√£o Computacional":
    st.header("Vis√£o Computacional")
    
    # Upload de imagem
    uploaded_file = st.file_uploader("Escolha uma imagem", type=['jpg', 'jpeg', 'png'])
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Imagem carregada', use_column_width=True)
        
        if st.button("Analisar Imagem"):
            st.success("An√°lise conclu√≠da!")
            col1, col2 = st.columns(2)
            with col1:
                st.write("Classifica√ß√£o:")
                st.write("- Banana: 95% de confian√ßa")
                st.write("- Est√°gio: Maduro")
            with col2:
                st.write("Recomenda√ß√µes:")
                st.write("- Pronto para colheita")
                st.write("- Bom estado de conserva√ß√£o")

elif page == "Configura√ß√µes":
    st.header("Configura√ß√µes")
    
    # Configura√ß√µes gerais
    st.subheader("Configura√ß√µes Gerais")
    api_key = st.text_input("API Key", type="password")
    ambiente = st.selectbox("Ambiente", ["Desenvolvimento", "Produ√ß√£o"])
    
    # Configura√ß√µes de notifica√ß√£o
    st.subheader("Configura√ß√µes de Notifica√ß√£o")
    email = st.text_input("Email para notifica√ß√µes")
    notificacoes = st.multiselect(
        "Tipos de notifica√ß√£o",
        ["Alertas de umidade", "Status de irriga√ß√£o", "Previs√£o de rendimento"]
    )
    
    # Salvar configura√ß√µes
    if st.button("Salvar Configura√ß√µes"):
        st.success("Configura√ß√µes salvas com sucesso!")

# Rodap√©
st.markdown("---")
st.markdown("Desenvolvido por Grupo 12 - FIAP") 